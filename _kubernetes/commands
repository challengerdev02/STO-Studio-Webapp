GOOGLE_PROJECT_ID=bytegum
GCLOUD_SERVICE_KEY
GOOGLE_COMPUTE_ZONE=us-central1-c

docker build  -f ./docker/Dockerfile $docker_tag_args ./
docker run -p 4000:7000 mc-app

Deployment Steps
- docker build -t mc-app -f ./docker/Dockerfile $docker_tag_args ./
- docker tag mc-app:latest gcr.io/bytegum/mc-app:latest
- docker push gcr.io/bytegum/mc-app:latest
- kubectl apply --validate=true -f _kubernetes/stg/deployment.stg.yml
- kubectl apply --validate=true -f _kubernetes/stg/service.stg.yml

Production
- kubectl apply --validate=true -f kubernetes/prod/deployment.prod.yml
- kubectl apply --validate=true -f kubernetes/prod/service.prod.yml

git rm -r one-of-the-directories
git rm --cached file1.txt

Logs
- kubectl logs -f mc-app-dpl-6d5b7997c4-7hbld --namespace=mc-stg
- kubectl logs -f deployment/mc-app-dpl --namespace=mc-stg --container=mc-app
- kubectl exec -it deployment/mc-app-dpl --namespace=mc-stg -- sh

Redis
- gcloud redis instances create kc-redis-main --region=us-central1-c

Secret Management
- kubectl get secret --namespace=kc-stg
- kubectl delete secret/my-db-secret
- kubectl delete mc-app-stg --namespace=kc-stg

------------------------------------------------------------------------------------------

https://whatdafox.com/deploy-nest-js-on-google-cloud-run/
## Docker ##
To safely safely remove each 'image' i
 - docker-compose down --rmi local

Tag the image to a registry for easier management
 - docker tag mc-app:latest gcr.io/kola-web-app/mc-app:latest

Then we can push the image to Googleâ€™s Container Registry (GCR) with:
 - docker push gcr.io/kola-web-app/mc-app:latest

## Gcloud ##
Create configurations
 - gcloud config configurations create cloud-run
To login
 - gcloud auth login
Set Default project
 - gcloud config set project bytegum
List Projects
 - gcloud projects list
Install components
 - gcloud components install kubectl
Create clusters
 - gcloud container clusters create circle-ci-cluster
List clusters
 - gcloud container clusters list

List Service accounts
- gcloud iam service-accounts list

Create Secrets
- kubectl create secret generic mc-gc-stg --namespace=mc-stg --from-file=/Users/emmanuelokafor/keys/bytegum.json


#### GCloud as a Docker credential helper

Create Service account Key
- gcloud iam service-accounts keys create ~/gc-service-key.json --iam-account kola-credit-services@kola-credit-services.iam.gserviceaccount.com
  ## created key [e44da1202f82f8f4bdd9d92bc412d1d8a837fa83] of type [json] as
    [/usr/home/username/gc-service-key.json] for
    [metacomics@bytegum.iam.gserviceaccount.com]

To configure authentication with service account credentials, run the following command:
- gcloud auth activate-service-account metacomics@bytegum.iam.gserviceaccount.com --key-file=/Users/emmanuelokafor/keys/bytegum.json

Configure Docker with the following command:
- gcloud worker configure-docker


## https://cloud.google.com/sdk/gcloud/reference/container/images/list
List gcloud repository images
- gcloud container images list --repository=gcr.io/kola-credit-services


Kube8
Generating a kubeconfig entry
- gcloud container clusters get-credentials kc-cluster --zone=us-central1-c

Dry run for deployment and services
- kubectl apply --validate=true --dry-run=true -f ops/

Dry run for deployment and services
- kubectl apply --validate=true -f ops/
- kubectl delete ingress <faulty_ingress>

Get name spaces
- kubectl get namespaces

list the services in staging namespace:
- kubectl get services --namespace=stg

Describe ingress
- kubectl get ingress mc-app --namespace=stg

To Create static ip
- gcloud compute addresses create mc-app-stg-static-ip --global

To describe ip address
- gcloud compute addresses describe mc-app-stg-static-ip --global

To view deployment logs
- kubectl logs mc-app-dpl-5f7fd4456-t54vb mc-app --namespace=kc-stg

Secret Management
- kubectl get secret kola-sa-secrets -o jsonpath='{.data}'
- kubectl get secret --namespace=kc-stg
- kubectl delete secret/my-db-secret
- kubectl delete mc-app-stg --namespace=kc-stg


## IP ADD STAGING : 35.227.215.139

